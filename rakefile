# rakefile for compiling plustache and tests

require 'rake/clean'
require 'rake/loaders/makefile'

# install prefix
PREFIX = "./"

# binaries
APPLICATION = "bin/plustache"
TEST = "bin/plustache_tests"
STATIC_LIB = "lib/libplustache.a"
# directories
BINDIR = "bin"
OBJDIR = "build"
LIBDIR = "lib"
# main plustache files
SRC_FILES = FileList['src/template.cpp', 'src/context.cpp']
SRC_OBJECTS = SRC_FILES.collect { |fn|
                                  File.join(OBJDIR, File.basename(fn).ext('o'))
                               }
# files for unit testing
TEST_FILES = FileList["tests/*.cpp"]
TEST_OBJECTS = TEST_FILES.collect { |fn|
                                  File.join(OBJDIR, File.basename(fn).ext('o'))
                                 }
# files for the plustache binary
BIN_FILES = FileList['src/main.cpp']
BIN_OBJECTS = BIN_FILES.collect { |fn|
                                  File.join(OBJDIR, File.basename(fn).ext('o'))
                                }

# include dirs
INCLUDE_DIRS = [".", "/usr/local/include"]
LDFLAGS = ["-L /usr/local/lib"]

res = %x[uname].chomp
if res == "Darwin"
  DYNFLAGS = ["-dynamiclib"]
  DYNAMIC_LIB = "lib/libplustache.dylib"
elsif res == "Linux"
  DYNFLAGS = ["-shared", "-Wl,-soname,libplustache.so.0.2.1"]
  DYNAMIC_LIB = "lib/libplustache.so.0.2.1"
  INCLUDE_DIRS.push("/usr/include")
  LDFLAGS.push("-L/usr/lib")
end

# compiler/linker stuff
CC = "g++"
LD = "g++"
CCFLAGS = ["-c", "-O3","-Wall", "-fPIC", "-I #{INCLUDE_DIRS.join(" -I ")}"]


# task definitions
task :default => "test:unit"

namespace :test do

  CCFLAGS.delete "-O3"
  CCFLAGS << "-g"
  CCFLAGS << "--coverage"
  CCFLAGS << "-O0"
  CCFLAGS << "-fprofile-arcs"
  CCFLAGS << "-ftest-coverage"
  LDFLAGS << "-g"
  LDFLAGS << "-O0"
  LDFLAGS << "--coverage"
  LDFLAGS << "-fprofile-arcs"

  desc "task for compiling and executing unit tests"
  task :unit => TEST do
    sh "./#{TEST} --gtest_output=xml:test.xml"
  end

  desc "task for style and error checking with cppcheck"
  task :style do
    sh "cppcheck -I . --xml --enable=all src/ 2> cppcheck.xml"
  end

  desc "task for generating coverage xml report"
  task :coverage => TEST do
    sh "./utils/gcovr -r . -e 'tests' -x -o coverage.xml"
  end

end

desc "install plustache as dynamic library"
task :install => :dynamic do
  prefix = ENV['PREFIX'] || ENV['prefix'] || PREFIX

  FileUtils.mkdir_p "#{prefix}/include"
  FileUtils.cp "include/template.hpp", "#{prefix}/include"
  FileUtils.cp "include/context.hpp", "#{prefix}/include"
  FileUtils.cp "include/plustache_types.hpp", "#{prefix}/include"

  FileUtils.mkdir_p "#{prefix}/lib"
  FileUtils.cp "#{DYNAMIC_LIB}", "#{prefix}/lib"

end

desc "task compiling plustache binary"
task :app => APPLICATION do
  sh "./#{APPLICATION}"
end

desc "task for compiling static plustache library"
task :static => STATIC_LIB do
end

desc "task for compiling dynamic plustache library"
task :dynamic => DYNAMIC_LIB do
end


# generate dependencies
file '.depend.mf' do
  sh "g++ -M -MF .depend.mf -I #{INCLUDE_DIRS.join(' -I')} \
#{SRC_FILES} #{TEST_FILES}"
end

import ".depend.mf"

# main binary rules
directory BINDIR
file APPLICATION => BINDIR
file APPLICATION => SRC_OBJECTS + BIN_OBJECTS do |t|
  sh "#{LD} #{SRC_OBJECTS} #{BIN_OBJECTS} -o #{t.name} #{LDFLAGS.join(" ")} \
-lboost_regex"
end

# rules for unit testing
directory BINDIR
file TEST => BINDIR
file TEST => SRC_OBJECTS + TEST_OBJECTS do |t|
  sh "#{LD} #{TEST_OBJECTS} #{SRC_OBJECTS} -o #{t.name} #{LDFLAGS.join(" ")} \
-lboost_regex -lgtest -lpthread"
end

# rules for static library
directory LIBDIR
file STATIC_LIB => LIBDIR
file STATIC_LIB => SRC_OBJECTS do |t|
  sh "ar rcs #{STATIC_LIB} #{SRC_OBJECTS}"
end
#
# rules for static library
directory LIBDIR
file DYNAMIC_LIB => LIBDIR
file DYNAMIC_LIB => SRC_OBJECTS do |t|
  sh "#{LD} #{DYNFLAGS.join(" ")} -o #{DYNAMIC_LIB} #{SRC_OBJECTS} -lboost_regex"
end

# compile rules for object files
directory OBJDIR
(TEST_FILES+SRC_FILES+BIN_FILES).each do |srcfile|
  objfile = File.join(OBJDIR, File.basename(srcfile).ext('o'))
  file objfile => [srcfile, OBJDIR] do
    sh "#{CC} #{CCFLAGS.join(" ")} #{srcfile} -o #{objfile}"
  end
end

# cleaning tasks
CLEAN.include("**/*.o", "*.xml", ".depend.mf", OBJDIR)
CLOBBER.include("**/*.o", "*.xml", APPLICATION, TEST, ".depend.mf", OBJDIR, BINDIR, LIBDIR)

